{"ast":null,"code":"var _jsxFileName = \"/Users/alchemist/Developer/frontend-simplified/Projects/my-library/src/components/ui/BestBooks.jsx\";\nimport React from \"react\";\nimport { books } from \"../../data\";\nimport Book from \"../Book\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BestBooks = ({\n  id\n}) => {\n  if (!books || books.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No books available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 12\n    }, this); // Example of error handling for empty books array\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"books\",\n    children: books.filter(book => {\n      if (id) {\n        // Check for id when on the individual book\n        // so the same book isn't recommended\n        return book.rating === 5 && book.id !== id;\n      }\n      return book.rating === 5;\n    }).slice(0, 4).map(book => /*#__PURE__*/_jsxDEV(Book, {\n      book: book\n    }, book.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n_c = BestBooks;\nexport default BestBooks;\nvar _c;\n$RefreshReg$(_c, \"BestBooks\");","map":{"version":3,"names":["React","books","Book","jsxDEV","_jsxDEV","BestBooks","id","length","children","fileName","_jsxFileName","lineNumber","columnNumber","className","filter","book","rating","slice","map","_c","$RefreshReg$"],"sources":["/Users/alchemist/Developer/frontend-simplified/Projects/my-library/src/components/ui/BestBooks.jsx"],"sourcesContent":["import React from \"react\";\nimport { books } from \"../../data\";\nimport Book from \"../Book\";\n\nconst BestBooks = ({ id }) => {\n  if (!books || books.length === 0) {\n    return <div>No books available</div>; // Example of error handling for empty books array\n  }\n\n  return (\n    <div className=\"books\">\n      {books\n        .filter((book) => {\n          if (id) {\n            // Check for id when on the individual book\n            // so the same book isn't recommended\n            return book.rating === 5 && book.id !== id;\n          }\n          return book.rating === 5;\n        })\n        .slice(0, 4)\n        .map((book) => (\n          <Book book={book} key={book.id} />\n        ))}\n    </div>\n  );\n};\n\nexport default BestBooks;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,YAAY;AAClC,OAAOC,IAAI,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,SAAS,GAAGA,CAAC;EAAEC;AAAG,CAAC,KAAK;EAC5B,IAAI,CAACL,KAAK,IAAIA,KAAK,CAACM,MAAM,KAAK,CAAC,EAAE;IAChC,oBAAOH,OAAA;MAAAI,QAAA,EAAK;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,CAAC,CAAC;EACxC;EAEA,oBACER,OAAA;IAAKS,SAAS,EAAC,OAAO;IAAAL,QAAA,EACnBP,KAAK,CACHa,MAAM,CAAEC,IAAI,IAAK;MAChB,IAAIT,EAAE,EAAE;QACN;QACA;QACA,OAAOS,IAAI,CAACC,MAAM,KAAK,CAAC,IAAID,IAAI,CAACT,EAAE,KAAKA,EAAE;MAC5C;MACA,OAAOS,IAAI,CAACC,MAAM,KAAK,CAAC;IAC1B,CAAC,CAAC,CACDC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CACXC,GAAG,CAAEH,IAAI,iBACRX,OAAA,CAACF,IAAI;MAACa,IAAI,EAAEA;IAAK,GAAMA,IAAI,CAACT,EAAE;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAClC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEV,CAAC;AAACO,EAAA,GAtBId,SAAS;AAwBf,eAAeA,SAAS;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}